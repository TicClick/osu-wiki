name: Post-merge outdate processing

on:
  pull_request:
    types: [closed]
    branches: [master]

jobs:
  process-outdated-files:
    name: Process outdated files after merge
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Get changed files and parse DO_NOT_OUTDATE rules
        id: parse-files
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            
            const baseSha = context.payload.pull_request.base.sha;
            const headSha = context.payload.pull_request.head.sha;
            const diffOutput = execSync(`git diff --name-only ${baseSha} ${headSha}`, { encoding: 'utf-8' });
            const changedFiles = diffOutput.trim().split('\n').filter(file => file.length > 0);
            console.log(`Changed files (git diff ${baseSha} ${headSha}):`, changedFiles);
            
            const prBody = context.payload.pull_request.body || '';
            console.log('PR body:', prBody);
            
            function parseDoNotOutdateRules(prBody) {
              if (!prBody) return [];
              
              if (/DO_NOT_OUTDATE\s*$/m.test(prBody)) {
                return ['*'];
              }
              
              const rules = [];
              const matches = prBody.match(/DO_NOT_OUTDATE:\s*(.+?)(?=\n|$)/gm);
              if (matches) {
                for (const match of matches) {
                  const content = match.replace(/DO_NOT_OUTDATE:\s*/, '');
                  const patterns = content.split(',').map(p => p.trim());
                  rules.push(...patterns);
                }
              }
              
              return rules;
            }
            
            const rules = parseDoNotOutdateRules(prBody);
            console.log('DO_NOT_OUTDATE rules:', rules);
            
            let excludeArgs = [];
            let shouldSkipAll = false;
            
            if (rules.includes('*')) {
              shouldSkipAll = true;
              console.log('Skipping all files due to DO_NOT_OUTDATE without specific files');
            } else {
              excludeArgs = rules.map(rule => `--exclude="${rule}"`);
            }
            
            const excludeArgsStr = excludeArgs.join(' ');
            console.log('--exclude arguments for osu-wiki-tools:', excludeArgsStr);
            
            core.setOutput('changed_files', changedFiles.join('\n'));
            core.setOutput('exclude_args', excludeArgsStr);
            core.setOutput('should_skip_all', shouldSkipAll.toString());
            core.setOutput('exclude_rules', rules.join('\n'));

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          cache: pip
          cache-dependency-path: requirements.txt
          python-version: "3.11"

      - name: Set up Python CI dependencies
        run: pip install -r requirements.txt

      - name: Run osu-wiki-tools with excludes
        if: steps.parse-files.outputs.should_skip_all != 'true'
        run: |
          exclude_args="${{ steps.parse-files.outputs.exclude_args }}"
          
          echo "Running osu-wiki-tools check-outdated-articles --autofix --autocommit $exclude_args"
          
          if [ -n "$exclude_args" ]; then
            eval "osu-wiki-tools check-outdated-articles --autofix --autocommit $exclude_args"
          else
            osu-wiki-tools check-outdated-articles --autofix --autocommit
          fi

      - name: Commit and push changes
        if: steps.parse-files.outputs.should_skip_all != 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: |
            Mark translations as outdated after PR #${{ github.event.pull_request.number }} merge
            
            Auto-generated by post-merge workflow
          branch: master
          commit_user_name: 'github-actions[bot]'
          commit_user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_author: 'github-actions[bot] <github-actions[bot]@users.noreply.github.com>'

      - name: Create summary
        run: |
          echo "## Post-merge processing completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**PR Number:** ${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.parse-rules.outputs.should_skip_all }}" = "true" ]; then
            echo "**Status:** All files skipped due to DO_NOT_OUTDATE rule" >> $GITHUB_STEP_SUMMARY
          else
            exclude_rules="${{ steps.parse-rules.outputs.exclude_rules }}"
            if [ -n "$exclude_rules" ]; then
              echo "**Exclude rules applied:**" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "$exclude_rules" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            else
              echo "**Status:** No exclude rules found, processed all changed files" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Changed files:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.get-changed-files.outputs.changed_files }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
